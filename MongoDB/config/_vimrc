" neobundle settings {{{
if has('vim_starting')
  set nocompatible

  if !isdirectory(expand('~/.vim/bundle/neobundle.vim/'))
    echo 'install neobundle...'
    :call system('git clone git://github.com/Shougo/neobundle.vim ~/.vim/bundle/neobundle.vim')
  endif

  set runtimepath+=~/.vim/bundle/neobundle.vim
endif

call neobundle#begin(expand('~/.vim/bundle'))
let g:neobundle_default_git_protocol='https'

NeoBundleFetch 'Shougo/neobundle.vim'
NeoBundle 'Shougo/unite.vim'
NeoBundle 'Shougo/neomru.vim', {
  \ 'depends' : 'Shougo/unite.vim'
  \ }
NeoBundle 'Shougo/unite-outline', {
  \ 'depends' : 'Shougo/unite.vim'
  \ }
NeoBundle 'Shougo/vimproc', {
  \ 'build' : {
  \   'windows' : 'make -f make_mingw32.mak',
  \   'cygwin'  : 'make -f make_cygwin.mak',
  \   'mac'     : 'make -f make_mac.mak',
  \   'unix'    : 'make -f make_unix.mak'
  \   }
  \ }
if has('lua')
  NeoBundleLazy 'Shougo/neocomplete.vim', {
  \ 'depends'  : 'Shougo/vimproc',
  \ 'autoload' : { 'insert' : 1, }
  \ }
endif
NeoBundleLazy 'Shougo/vimshell', {
  \ 'depends'  : 'Shougo/vimproc',
  \ 'autoload' : {
  \   'commands' : [{ 'name' : 'VimShell', 'complete' : 'customlist,vimshell#complete' },
  \                 'VimShellExecute', 'VimShellInteractive',
  \                 'VimShellTerminal', 'VimShellPop'],
  \   'mappings' : ['<Plug>(vimshell_switch)']
  \   }
  \ }
NeoBundle 'Townk/vim-autoclose'
NeoBundleLazy 'tpope/vim-endwise', {
  \ 'autoload' : { 'insert' : 1 }
  \ }
NeoBundleLazy 'Shougo/neosnippet', {
  \ 'depends'  : 'Shougo/neosnippet-snippets',
  \ 'autoload' : {
  \   'insert'    : 1,
  \   'filetypes' : 'snippet'
  \   }
  \ }
NeoBundle 'Shougo/neosnippet-snippets'
NeoBundle 'itchyny/lightline.vim'
NeoBundle 'nathanaelkane/vim-indent-guides.git'

NeoBundle 'tomasr/molokai'

" install check for plugin
NeoBundleCheck
call neobundle#end()
" }}}

" neocomplete settings {{{
let g:neocomplete#enable_at_startup               = 1
let g:neocomplete#auto_completion_start_length    = 3
let g:neocomplete#enable_ignore_case              = 1
let g:neocomplete#enable_smart_case               = 1
let g:neocomplete#enable_camel_case               = 1
let g:neocomplete#use_vimproc                     = 1
let g:neocomplete#sources#buffer#cache_limit_size = 1000000
let g:neocomplete#sources#tags#cache_limit_size   = 30000000
let g:neocomplete#enable_fuzzy_completion         = 1
let g:neocomplete#lock_buffer_name_pattern        = '\*ku\*'
" }}}

" vimshell settings {{{
nmap <silent> vs :<C-u>VimShell<CR>
nmap <silent> vp :<C-u>VimShellPop<CR>
" }}}

" neosnippet settings {{{
imap <C-k> <Plug>(neosnippet_expand_or_jump)
smap <C-k> <Plug>(neosnippet_expand_or_jump)
" }}}

" common settings {{{
filetype plugin indent on

colorscheme molokai
set t_Co=256
set background=dark
syntax on

set list
set listchars=tab:>.,trail:_,extends:>,precedes:<,nbsp:%,eol:$
function! ZenkakuSpace()
  highlight ZenkakuSpace cterm=reverse ctermfg=DarkMagenta gui=reverse guifg=DarkGray
endfunction
if has('syntax')
  augroup ZenkakuSpace
    autocmd!
    autocmd ColorScheme * call ZenkakuSpace()
    autocmd BufNew,BufRead * match ZenkakuSpace /!!/
  augroup END
  call ZenkakuSpace()
endif

set number
set ts=4
set sw=4
set showmatch
set ruler
set scrolloff=7
set laststatus=2
set showmode
set showcmd

set encoding=utf-8
set fileencodings=iso-2022-jp,euc-jp,euc-jisx0213,sjis,utf-8
set fileformats=unix,dos,mac
set formatoptions+=mm
if exists('&ambiwidth')
  set ambiwidth=double
endif

set pastetoggle=

set wrapscan
set ignorecase
set smartcase
set incsearch
set hlsearch

set nobackup
set noswapfile
" }}}
